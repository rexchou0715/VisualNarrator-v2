SYSTEM :


    You are a Requirements Engineer specializing in domain modeling.
    I will provide you with a selection of user stories from a specific domain, along with a list of classes identified from these user stories. Your task is to determine the relevant associations among these classes, following the guidelines below.
    
    Step 1: Identify Potential Associations
    o Analyze the Provided Classes: Examine each pair (or group) of classes to see if there is a meaningful structural relationship between them, grounded in the user stories.
    o Domain Modeling Context: Only propose associations that directly reflect real-world interactions.
    o Ignore Association Names: Do not worry about naming each relationship; focus on identifying whether an association exists.
    

USER :


    Here is the list of user stories:
    
    As a user, I want to save my personal information (i.e., name, date of birth, email, address, and preferences) so that I don't have to repeat this process with every ticket purchase.
As a user, I want to save my payment details so that I don't have to fill these details in every time.
As a user, I want to fill out a short survey about my preferences in (music) genre and event types so that I can receive personalized content.
As a user, I want to see personalized content (e.g., recommended events) based on my user profile to quickly see events I am interested in.
As a user, I want to see and edit my preferences so that my information does not become outdated.
As a user, I want to be able to change my password so that I can keep my account information safe.
As a user, I want to be able to edit my personal information (e.g., address) so that I can update it when needed.
As a user, I want to see a history of previous ticket orders, so that I can easily retrieve tickets and additional information when needed.
As a user, I want to see an overview of upcoming events for which I bought a ticket, so that I can easily find this information when needed.
As a user, I want to find my list of favorited artists and events under my profile, so that I can easily find them back.
As a visitor, I want to read about the event (e.g., location, date, and artist information), so that I can decide whether to buy a ticket.
As a visitor, I want to be able to buy tickets directly from the event page, so that the purchasing process is shortened.
As a reseller, I want to be able to sell my tickets directly from the event page, so that the reselling process is shortened.
As a (single-time) visitor, I want to buy a ticket as a guest, so that the overall purchase progress is shorter.
As a guest (i.e., single-time user), I want to only fill in my name and email when buying a ticket so that the process is faster than creating an account.
As a guest, I want to not fill in all my information to buy a ticket, so that I can avoid unnecessarily sharing my personal data.
As a guest, I can use the platform the same way as users looking to buy a ticket, so that I am not forced into registering.
As a visitor, I want to purchase a ticket in an easy and short process, so that I can avoid any complications during the process.
As a visitor, I want to see events with available tickets so that I can buy the tickets.
As a visitor, I want to be able to buy multiple tickets for one event in one purchase so that I can buy tickets for me and whomever I go with.
As a visitor, I want to see available seats at the event, so that I can decide which one to buy.
As a visitor, I want to see the available seats in a map of the venue so that I can pick the right seating place for during the event.
As a visitor, I want to see the types of tickets (e.g., normal, premium, gold tickets) once I select the event, so that I can choose which type I want to buy.
As a visitor, I want to add tickets to the shopping cart, so that I can buy tickets.
As a visitor, I want to see my order summary, so that I can make sure that I buy the correct ticket(s).
As a visitor, I want to see a list of payment methods. so that I can pay for my tickets.
As a company, I want to have the overall buying process as intuitive and quick as possible so that we can attract (and retain) visitors to use our platform.
As a visitor, I want to get a list of events as search results, so that I can select the desired event.
As a visitor, I want to be able to land on the event page when clicking on a search result so that I can visit the page I want.
As a visitor, I want to have the search engine non-case sensitive and punctuation sensitive so that I can still find the desired event when I misspell the name.
As a visitor, I want to be able to sort my search results by date so that I can see which events are up first.
As a visitor, I want to be able to filter my search by price so that I can only see tickets within my price range.
As a visitor, I want to be able to filter my search results by venue, so that I can easily find the event I want to go to.
As a visitor, I want to be able to filter a list of events by genre, so that I don't have to see events I'm not interested in.
As a company, I want to have the minimum price for reselling a ticket at 5 cents so that I can receive a service fee.
As a company, I want to have resellers sell only digital tickets, so that the tickets can be validated automatically.
As a company, I want to validate tickets, so that I can ensure visitors a trustworthy platform.
As a company, I want to deduct a service fee of 3% from the total price set by the reseller so that the reselling platform is a financially beneficial addition to the business.
As a company, I want to avoid fraudulent behavior on the reselling platform, so that visitors gain trust in the platform.
As a company, I want to protect users from online fraud, so that I can avoid the failure of the reselling platform.
As a reseller, I want to be able to resell tickets directly from the event page so that the reselling process is shortened.
As a reseller, I can upload my digital ticket from my local device, so that I can offer it to other users.
As a reseller, I can set any price above 5 cents for the ticket I'm selling.
As a reseller, I can add a short description of the event so that the other (buying) users know what type of ticket, and for which event, I'm selling.
As a reseller, I want to save my bank account (IBAN number) in my user profile, so that I can receive the money for the tickets directly to my bank account.
As a visitor, I want to see upcoming events in a calendar-type view so that I can compare it to my own planner.
As a visitor, I want to see popular, upcoming events so that I can stay updated about interesting events.
As a visitor, I want to click on an event shown on the homepage and be directed to the event page, so that I don't have to search for it.
As an artist, I want to find information about my events on the designated event page so that visitors can read about my event and consider buying tickets.
As an artist, I want to have a link to my website on the event page so that fans can find out more about me.
As an artist, I want to have a link to my social media on the event page, so that fans can follow me for regular updates.
As an artist, I want to have a description of myself and my upcoming event (or tour) to be shown on my event page so that visitors can inform themselves about my show.
As a user, I want to favorite events or artists on the related event page, so that I can easily find it back.
As an artist, I want to have a link to music platforms (e.g., YouTube, Spotify, Apple Music), so that visitors buying tickets for my show can stream my music.
    
    Here is the list of classes identified from these user stories. Only create associations based on the classes shown in this list. Do not invent any other class.
    
    ['user', 'event types', 'events', 'artists', 'ticket', 'payment', 'reseller', 'venue', 'order', 'genre']
    

ASSISTANT :

<think>
Alright, I'm faced with determining the associations between the classes provided based on the user stories. The classes are: user, event types, events, artists, ticket, payment, reseller, venue, order, and genre.

First, I'll start by going through each class and think about how they might relate to each other.

1. **User**: This seems central. Users can save personal info, payment details, edit preferences, change passwords, and manage their account. They also interact with events, tickets, orders, etc.

2. **Event Types**: Not entirely clear from the list, but perhaps this refers to the kind of events, like concerts, festivals, etc. Users might filter events by type.

3. **Events**: These are the core of the platform. Users buy tickets for events, resellers sell tickets for them, and artists have event pages.

4. **Artists**: They have event pages, links to their websites and social media, and descriptions on their event pages.

5. **Ticket**: Users buy tickets, resellers sell them. Tickets are for specific events and venues. Payments are made for tickets.

6. **Payment**: Users save payment details to avoid re-entering. Payments are made when buying tickets.

7. **Reseller**: They sell tickets, likely through the platform. They might have a user profile to save bank details.

8. **Venue**: Where events take place. Users might filter events by venue.

9. **Order**: Users can see their order history, and orders are associated with tickets and payments.

10. **Genre**: Users filter events by genre, which is a category of music or event type.

Now, I'll go through each class and identify potential associations.

- **User**: Users can have multiple orders, as they can buy multiple tickets. So, a User has an Order. Also, users can save payment details, so there's a Payment associated with a User. Users can favorite events, so there's a User to Event association. Users can belong to genres if they have preferences, but perhaps that's more of a property. Alternatively, genres are a separate class, so maybe Users can have preferences for genres.

- **Event Types**: Maybe a type of event, like concerts or festivals. Events have types, so Event has a type. Users can filter events by type, so perhaps an association between User and Event Type, but more likely, Events are categorized by types.

- **Events**: Events can have multiple Artists if it's a festival, for example. So, an Event has multiple Artists. Events can have multiple Venues if they tour, but more likely, each Event is at a specific Venue. So, Event has one Venue. Events can be of a certain Type, so Event is associated with Event Type. Events can have multiple Tickets, as different ticket types (normal, premium) exist.

- **Artists**: Each Artist is associated with multiple Events if they perform in multiple shows. So, Artist has multiple Events.

- **Ticket**: Each Ticket is for a specific Event and Venue. So, Ticket is associated with Event and Venue. Users buy Tickets, so Ticket is associated with User. Orders consist of multiple Tickets, so Ticket is part of an Order. Payments are made for Tickets, so Ticket is associated with Payment.

- **Payment**: Payments are made by Users, so Payment is associated with User. Payments are part of Orders, as when you buy a ticket, you make a payment, so Payment is associated with Order.

- **Reseller**: Resellers sell Tickets, so Reseller is associated with Ticket. They also might have a User profile to save their bank account details, so Reseller is associated with User.

- **Venue**: Each Venue hosts multiple Events, so Venue is associated with Event.

- **Order**: An Order consists of multiple Tickets, so Order is associated with Ticket. Orders are made by Users, so Order is associated with User. Payments are part of Orders, so Order is associated with Payment.

- **Genre**: Users can filter events by Genre, so Genre is associated with Events. Each Event has a Genre, so Event is associated with Genre.

Now, considering each association type:

- **User -> Order**: Aggregation, since a User can have many Orders, but the Order exists independently.

- **User -> Payment**: Aggregation, as a User can have multiple Payments, each associated with different Orders.

- **User -> Event**: Aggregation, as a User can favorite multiple Events.

- **User -> Genre**: Maybe composition, as a User's preferences include genres, but perhaps it's better to model as a User has preferences for Genres, so it's a composition.

- **Event -> Artist**: Composition, because an Event is made up of the Artists performing.

- **Event -> Venue**: Composition, as an Event occurs at a Venue.

- **Event -> Event Type**: Composition, as an Event belongs to a Type.

- **Event -> Genre**: Composition, as an Event has a specific Genre.

- **Ticket -> Event**: Composition, as a Ticket is for a specific Event.

- **Ticket -> Venue**: Composition, as a Ticket is for a specific Venue.

- **Ticket -> User**: Composition, as a Ticket is owned by a User.

- **Order -> Ticket**: Aggregation, as an Order can have multiple Tickets.

- **Order -> User**: Composition, as an Order is made by a User.

- **Order -> Payment**: Composition, as a Payment is part of an Order.

- **Payment -> User**: Composition, as a Payment is made by a User.

- **Reseller -> Ticket**: Aggregation, as a Reseller can sell multiple Tickets.

- **Reseller -> User**: Composition, as a Reseller is a type of User.

- **Venue -> Event**: Aggregation, as a Venue can host multiple Events.

Potential issues: Some classes might be better modeled with attributes instead of associations. For example, a User's payment details could be attributes rather than separate classes. However, since Payment is a separate class, it's treated as an association.

I think I've covered most of the associations, but I need to ensure each is based on the user stories and reflects real-world interactions.
</think>

Based on the user stories and the provided classes, the relevant associations and their types are determined as follows:

1. **User Aggregates Orders**:  
   - **Type**: Aggregation  
   - **Explanation**: A user can have multiple orders, each representing a purchase of tickets.

2. **User Aggregates Payments**:  
   - **Type**: Aggregation  
   - **Explanation**: A user can have multiple payments associated with different transactions.

3. **User Aggregates Events**:  
   - **Type**: Aggregation  
   - **Explanation**: A user can favorite multiple events, indicating an aggregation relationship.

4. **User Composes Genre Preferences**:  
   - **Type**: Composition  
   - **Explanation**: A user's preferences include genres, which are integral to their profile.

5. **Event Composes Artists**:  
   - **Type**: Composition  
   - **Explanation**: An event may feature multiple artists, making them a composition of the event.

6. **Event Composes Venue**:  
   - **Type**: Composition  
   - **Explanation**: An event occurs at a specific venue, which is a composition.

7. **Event Composes Event Type**:  
   - **Type**: Composition  
   - **Explanation**: Each event belongs to a specific type, such as concert or festival.

8. **Event Composes Genre**:  
   - **Type**: Composition  
   - **Explanation**: An event is categorized by its genre.

9. **Ticket Composes Event**:  
   - **Type**: Composition  
   - **Explanation**: A ticket is issued for a specific event, making it a composition.

10. **Ticket Composes Venue**:  
    - **Type**: Composition  
    - **Explanation**: Each ticket is associated with a specific venue.

11. **Ticket Composes User**:  
    - **Type**: Composition  
    - **Explanation**: A ticket is owned by a specific user.

12. **Order Aggregates Tickets**:  
    - **Type**: Aggregation  
    - **Explanation**: An order can include multiple tickets for different events or quantities.

13. **Order Composes User**:  
    - **Type**: Composition  
    - **Explanation**: An order is made by a specific user.

14. **Order Composes Payment**:  
    - **Type**: Composition  
    - **Explanation**: A payment transaction is part of an order.

15. **Payment Composes User**:  
    - **Type**: Composition  
    - **Explanation**: A payment is made by a specific user.

16. **Reseller Aggregates Tickets**:  
    - **Type**: Aggregation  
    - **Explanation**: A reseller can sell multiple tickets.

17. **Reseller Composes User**:  
    - **Type**: Composition  
    - **Explanation**: A reseller is a type of user.

18. **Venue Aggregates Events**:  
    - **Type**: Aggregation  
    - **Explanation**: A venue can host multiple events over time.

These associations are grounded in the user stories and reflect real-world interactions within the domain.

USER :


    Based on the user stories and the list of potential associations you provided, refine the list by following Step 2.
    
    Step 2: Filter Out Unnecessary/Incorrect Associations
    Use the following criteria to remove or refine associations:
    o Irrelevant Associations: Remove any that do not fit the domain.
    o Implementation Associations: Exclude technical constructs.
    o Ternary Associations: Avoid or break down associations involving three or more classes.
    o Derived Associations: Remove any association that can be inferred from existing ones.
    If an association cannot be clearly classified as suitable or unsuitable, mark it as "optional" and provide an explanation.
    

ASSISTANT :

<think>
Alright, I need to help the user refine the list of associations based on the given user stories and classes. The user has already provided a list of classes and potential associations, and now they want to filter out unnecessary or incorrect associations following specific criteria.

First, I should recall the classes we have: User, Event Types, Events, Artists, Ticket, Payment, Reseller, Venue, Order, and Genre. These classes are derived from the user stories, which revolve around users interacting with events, artists, tickets, payments, etc.

The task is to go through each association I proposed earlier and apply the filtering criteria. The criteria include removing irrelevant associations, excluding technical constructs, avoiding or breaking down ternary associations, and removing derived associations that can be inferred from existing ones. If an association is uncertain, it should be marked as optional with an explanation.

Let me list out the associations I previously proposed:

1. **User Aggregates Orders**: A user can have multiple orders.
2. **User Aggregates Payments**: A user can have multiple payments.
3. **User Aggregates Events**: A user can favorite multiple events.
4. **User Composes Genre Preferences**: A user's preferences include genres.
5. **Event Composes Artists**: An event features multiple artists.
6. **Event Composes Venue**: An event occurs at a specific venue.
7. **Event Composes Event Type**: Each event belongs to a specific type.
8. **Event Composes Genre**: An event is categorized by its genre.
9. **Ticket Composes Event**: A ticket is issued for a specific event.
10. **Ticket Composes Venue**: Each ticket is associated with a specific venue.
11. **Ticket Composes User**: A ticket is owned by a specific user.
12. **Order Aggregates Tickets**: An order can include multiple tickets.
13. **Order Composes User**: An order is made by a specific user.
14. **Order Composes Payment**: A payment transaction is part of an order.
15. **Payment Composes User**: A payment is made by a specific user.
16. **Reseller Aggregates Tickets**: A reseller can sell multiple tickets.
17. **Reseller Composes User**: A reseller is a type of user.
18. **Venue Aggregates Events**: A venue can host multiple events.

Now, I'll go through each of these associations one by one and apply the filtering criteria.

1. **User Aggregates Orders**: This seems relevant as a user can have multiple orders. It's a standard relationship in e-commerce and ticketing systems. Not technical, not ternary, and not derived from another association. Keep it.

2. **User Aggregates Payments**: Similar to the above, a user can have multiple payment methods or transactions. Relevant and necessary. Keep it.

3. **User Aggregates Events**: Users can favorite multiple events, which is captured here. It's a direct relationship based on the user stories. Keep it.

4. **User Composes Genre Preferences**: This reflects the user's preferences in music genre, which is essential for personalization. It's a direct relationship. Keep it.

5. **Event Composes Artists**: An event can feature multiple artists. This is a core relationship in event modeling. Keep it.

6. **Event Composes Venue**: Each event occurs at a specific venue. This is a foundational relationship. Keep it.

7. **Event Composes Event Type**: Categorizing events into types like concerts or festivals is important. This is a direct relationship. Keep it.

8. **Event Composes Genre**: While events can be categorized by genre, this might overlap with the User's genre preferences. It could be derived if genre is already handled at the user level, but it's still necessary for the event's own categorization. Keep it as optional.

9. **Ticket Composes Event**: Each ticket is associated with a specific event. Core relationship. Keep it.

10. **Ticket Composes Venue**: Each ticket is linked to the venue of the event. This is necessary for validation purposes. Keep it.

11. **Ticket Composes User**: Each ticket is owned by a specific user. Important for tracking and management. Keep it.

12. **Order Aggregates Tickets**: An order contains multiple tickets. Fundamental relationship in e-commerce. Keep it.

13. **Order Composes User**: An order is made by a specific user. Essential for tracking and user history. Keep it.

14. **Order Composes Payment**: Each order includes a payment transaction. Core relationship. Keep it.

15. **Payment Composes User**: A payment is made by a specific user. Necessary for financial tracking. Keep it.

16. **Reseller Aggregates Tickets**: A reseller can sell multiple tickets. Important for reselling functionality. Keep it.

17. **Reseller Composes User**: A reseller is a type of user. Necessary for distinguishing roles. Keep it.

18. **Venue Aggregates Events**: A venue hosts multiple events. Fundamental relationship. Keep it.

After reviewing all associations, none seem to be irrelevant or purely technical. All are grounded in the user stories and domain context. There are no ternary associations to avoid or break down, as each relationship involves two classes only. Also, none of the associations are derived from others, so they all stand on their own.

Therefore, all associations are suitable and should be retained. There are no optional associations in this case since all are necessary for accurately modeling the domain based on the provided user stories and classes.
</think>

Based on the user stories and the list of potential associations, the refined list of associations is as follows:

1. **User Aggregates Orders**:  
   - **Type**: Aggregation  
   - **Explanation**: A user can have multiple orders associated with their account, reflecting the purchases made over time.

2. **User Aggregates Payments**:  
   - **Type**: Aggregation  
   - **Explanation**: A user may have multiple payment methods or transactions linked to their profile for seamless checkout processes.

3. **User Aggregates Events**:  
   - **Type**: Aggregation  
   - **Explanation**: Users can favorite multiple events, allowing for easy access to their preferred content.

4. **User Composes Genre Preferences**:  
   - **Type**: Composition  
   - **Explanation**: A user's preferences include genres, which are integral to personalizing their experience on the platform.

5. **Event Composes Artists**:  
   - **Type**: Composition  
   - **Explanation**: An event typically features multiple artists, which is a core aspect of event modeling.

6. **Event Composes Venue**:  
   - **Type**: Composition  
   - **Explanation**: Each event occurs at a specific venue, a foundational relationship in event management.

7. **Event Composes Event Type**:  
   - **Type**: Composition  
   - **Explanation**: Events are categorized into types (e.g., concerts, festivals), which is essential for organizing and searching events.

8. **Event Composes Genre**:  
   - **Type**: Composition (Optional)  
   - **Explanation**: While genre can be derived from the artists associated with an event, explicitly categorizing events by genre enhances search and filtering capabilities. This association is optional but beneficial.

9. **Ticket Composes Event**:  
   - **Type**: Composition  
   - **Explanation**: Each ticket is issued for a specific event, a core relationship in ticketing systems.

10. **Ticket Composes Venue**:  
    - **Type**: Composition  
    - **Explanation**: Each ticket is associated with the venue of the event, crucial for validation and attendee information.

11. **Ticket Composes User**:  
    - **Type**: Composition  
    - **Explanation**: A ticket is owned by a specific user, essential for tracking and management purposes.

12. **Order Aggregates Tickets**:  
    - **Type**: Aggregation  
    - **Explanation**: An order can include multiple tickets, reflecting the quantity and variety purchased in a single transaction.

13. **Order Composes User**:  
    - **Type**: Composition  
    - **Explanation**: An order is made by a specific user, necessary for tracking and user history.

14. **Order Composes Payment**:  
    - **Type**: Composition  
    - **Explanation**: Each order includes a payment transaction, a fundamental relationship in e-commerce.

15. **Payment Composes User**:  
    - **Type**: Composition  
    - **Explanation**: A payment is made by a specific user, essential for financial tracking and reconciliation.

16. **Reseller Aggregates Tickets**:  
    - **Type**: Aggregation  
    - **Explanation**: A reseller can offer multiple tickets for resale, facilitating the secondary market functionality.

17. **Reseller Composes User**:  
    - **Type**: Composition  
    - **Explanation**: A reseller is a type of user, necessary for role-based access and tracking.

18. **Venue Aggregates Events**:  
    - **Type**: Aggregation  
    - **Explanation**: A venue can host multiple events over time, reflecting its role in the event ecosystem.

All associations have been reviewed and refined based on the criteria provided. Each association is relevant, non-technical, and free from ternary or derived relationships. The result is a coherent and comprehensive domain model that aligns with the user stories and the provided classes.

USER :


    Step 3: Present the Associations in 'X-Y' Format
    For each valid association, present it in the format X-Y, where X and Y are the names of the associated classes. Each association should reflect a relationship that is clearly stated or reasonably implied in the user stories.
    If an association is ambiguous or uncertain, prefix it with (Optional) and do not try to reclassify it as valid yourself.
    
    Please follow the output format strictly

    Output Format:
    Here is the final list of associations:
    1. Class1-Class2
    2. Class3-Class4
    3. (Optional) Class5-Class6 : This association is tentative because [brief explanation of the ambiguity]

    

ASSISTANT :

<think>
Alright, so I have this task where I need to figure out the associations between different classes based on some user stories. The classes provided are 'user', 'event types', 'events', 'artists', 'ticket', 'payment', 'reseller', 'venue', 'order', and 'genre'. I've gone through the user stories, and I've identified some potential associations, but now I need to filter out the unnecessary or incorrect ones.

First, I need to understand what each association means. For example, 'User Aggregates Orders' means that a user can have multiple orders. That makes sense because a user might buy tickets for multiple events over time. Similarly, 'User Aggregates Payments' means a user can have multiple payment methods or transactions, which is also logical.

Then there's 'User Aggregates Events', which means a user can favorite or track multiple events. That seems relevant since users often like to keep track of events they're interested in.

'User Composes Genre Preferences' means a user's preferences include genres, which is important for personalizing their experience on the platform. That makes sense too.

'Event Composes Artists' is about how an event is made up of artists performing. This seems straightforward because events are typically associated with the artists performing in them.

'Event Composes Venue' means each event is held at a specific venue, which is a fundamental aspect of event management.

'Event Composes Event Type' categorizes events into types like concerts or festivals, which helps in organizing and searching events.

'Event Composes Genre' is a bit tricky. It could be derived from the artists in the event, but having it explicitly might help in filtering events by genre.

'Ticket Composes Event' means each ticket is for a specific event, which is essential for ticketing systems.

'Ticket Composes Venue' associates a ticket with the venue of the event, important for validation.

'Ticket Composes User' means each ticket is owned by a specific user, which is necessary for tracking and management.

'Order Aggregates Tickets' means an order can include multiple tickets, reflecting the quantity and variety purchased.

'Order Composes User' links an order to the user who made it, necessary for tracking.

'Order Composes Payment' means each order includes a payment transaction, fundamental for e-commerce.

'Payment Composes User' links a payment to the user making it, essential for financial tracking.

'Reseller Aggregates Tickets' means a reseller can offer multiple tickets, facilitating the secondary market.

'Reseller Composes User' means a reseller is a type of user, necessary for role-based access.

'Venue Aggregates Events' means a venue can host multiple events, reflecting its role in the event ecosystem.

Now, I need to see if any of these associations are unnecessary or incorrect. For example, 'Event Composes Genre' might be optional because the genre could be inferred from the artists associated with the event. However, having it explicitly might offer better filtering capabilities.

Overall, most associations seem valid and necessary for modeling the domain accurately. I'll present them in 'X-Y' format, marking 'Event Composes Genre' as optional due to the possibility of derivation.
</think>

Here is the final list of associations:

1. User-Orders
2. User-Payments
3. User-Events
4. User-Genre Preferences
5. Event-Artists
6. Event-Venue
7. Event-Event Type
8. (Optional) Event-Genre : This association is tentative because genre can be derived from the artists associated with the event.
9. Ticket-Event
10. Ticket-Venue
11. Ticket-User
12. Order-Tickets
13. Order-User
14. Order-Payment
15. Payment-User
16. Reseller-Tickets
17. Reseller-User
18. Venue-Events